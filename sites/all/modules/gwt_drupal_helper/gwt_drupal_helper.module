<?php
/**
 * igov theme module
 */

/**
 * constant declaration
 */
// base image name
define('GWT_SLIDER_IMAGE_NAME', 'slides_image-');
// slider directory
define('GWT_SLIDER_DIRECTORY', 'gwt_drupal_helper_slides/');

// Create a block that handles the banner slider
function gwt_drupal_helper_block_info(){

  $blocks['gwt_drupal_helper_slides'] = array(
    'info' => t('GWT: Banner Image Slider'),
    'region' => 'banner',
  );
  $blocks['gwt_drupal_helper_trans_seal'] =  array(
    'info' => t('GWT: Transparency Seal'),
    'region' => 'sidebar_first',
    'visibility' => 'BLOCK_VISIBILITY_LISTED',
    'pages' => '',
  );
  $blocks['gwt_drupal_helper_pst'] =  array(
    'info' => t('GWT: Philippine Standard Time'),
    'region' => 'sidebar_first',
    'visibility' => 'BLOCK_VISIBILITY_LISTED',
    'pages' => '',
  );

  return $blocks;
}

function gwt_drupal_helper_block_configure($delta = '') {
  // This example comes from node.module.
  $form = array();

  switch ($delta) {
    case 'gwt_drupal_helper_slides':
      // TODO: create a basic settings for image slider
      // full width settings
      $form['test'] = array(
        //'#markup' => '<pre>'.print_r(image_styles(), 1).'</pre>',
        );
      break;
    case 'gwt_drupal_helper_trans_seal':
      $form['gwt_drupal_helper_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Settings'),
      );
      $form['gwt_drupal_helper_fieldset']['trans_link'] = array(
        '#type' => 'textfield',
        '#title' => 'Image Link',
        '#description' => t('Transparency image link.').'<br/><strong>e.g.</strong> node/1 or &lt;front&gt;',
        '#default_value' => variable_get('gwt_drupal_helper_trans_seal_link', 'node'),
      );
      $form['gwt_drupal_helper_fieldset']['alt_text'] = array(
        '#type' => 'textfield',
        '#title' => 'Alt Text Attribute',
        '#description' => t('Transparency image alt attribute.'),
        '#default_value' => variable_get('gwt_drupal_helper_alt_text_attr', 'Transparency Seal'),
      );
      $form['gwt_drupal_helper_fieldset']['title_text'] = array(
        '#type' => 'textfield',
        '#title' => 'Title Text Attribute',
        '#description' => t('Transparency image text attribute.'),
        '#default_value' => variable_get('gwt_drupal_helper_title_text_attr', 'Transparency Seal'),
      );
      break;
  }
  return $form;
}

/**
 * implementation of hook_block_save()
 */
function gwt_drupal_helper_block_save($delta, $edit=array()){
  switch ($delta) {
    case 'gwt_drupal_helper_trans_seal':
      // check if link exists
      if(!drupal_valid_path($edit['trans_link'])){
        break;
      }
      variable_set('gwt_drupal_helper_trans_seal_link', $edit['trans_link']);
      variable_set('gwt_drupal_helper_alt_text_attr', $edit['alt_text']);
      variable_set('gwt_drupal_helper_title_text_attr', $edit['title_text']);
      break;
  }
}

/**
 * implementation of hook_block_view
 */
function gwt_drupal_helper_block_view($delta = ''){
  $block = array();

  switch ($delta) {
    case 'gwt_drupal_helper_slides':
      // check if there are already a gwt slides content types
      
      // load gwt slides content types
      // print slides into foundation based slider
      $block['subject'] = '';

      $gwt_slides_content = _gwt_drupal_helper_get_gwt_slides();
      $block['content'] = $gwt_slides_content;
      break;
    case 'gwt_drupal_helper_trans_seal':
      $link = variable_get('gwt_drupal_helper_trans_seal_link', 'node');
      $alt = variable_get('gwt_drupal_helper_alt_text_attr', 'node');
      $title = variable_get('gwt_drupal_helper_title_text_attr', 'node');

      // print the transparency seal here
      $trans_seal = path_to_theme().'/images/transparency-seal.png';
      $trans_seal = theme_image(
        array(
          'path' => $trans_seal,
          'attributes' => array(
            'alt' => $alt,
            'title' => $title,
          ),
        ));
      
      if($link != 'node'){
        $trans_seal = l($trans_seal, $link, array(
          'html' => true,
          ));
      }
      $trans_seal = '<div class="transparency-seal">'.$trans_seal.'</div>';

      $block['subject'] = t('Transparency Seal');
      $block['content'] = $trans_seal;
      break;
    case 'gwt_drupal_helper_pst':
      // $pst_content = '<iframe src="http://oras.pagasa.dost.gov.ph/time_display/time/" frameborder="0" width="100%" allowtransparency="true" scrolling="no"></iframe>';
      $pst_content = '<div id="pst-container">
  <div>Philippine Standard Time:</div>
  <div id="pst-time"></div>
  <div><a href="https://gwhs.i.gov.ph/pst/" id="pst-source" target="_blank">PST Source</a></div>
</div>

<script type="text/javascript" id="gwt-pst">
(function(d, eId) {
  var js, gjs = d.getElementById(eId);
  js = d.createElement("script"); js.id = "gwt-pst-jsdk";
  js.src = "//gwhs.i.gov.ph/pst/gwtpst.js?"+new Date().getTime();
  gjs.parentNode.insertBefore(js, gjs);
}(document, "gwt-pst"));

var gwtpstReady = function(){
  new gwtpstTime("pst-time");
}
</script>';
      $block['subject'] = t('Philippine Standard Time');
      $block['content'] = $pst_content;
      break;
  }

  return $block;
}

/**
 * helper function
 * load all the gwt_slides content types 
 */
function _gwt_drupal_helper_get_gwt_slides(){
  $type = "gwt_slides"; 

  // TODO: optimize the query, if needed.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1) // is enabled
    ->propertyCondition('type', $type)
    ->fieldOrderBy('field_gwt_weight', 'value', 'ASC')
    ;
  $result = $query->execute();
  // if no results found
  if(!isset($result['node'])){
    return false;
  }

  $nodes = node_load_multiple(array_keys($result['node']));
  // $nodes = node_load_multiple(array(), array('type' => $type)); 

  $output = '';
  $output .= '<div class="orbit" role="region" aria-label="Featured Slider" data-orbit>';
  $output .= '<button class="orbit-previous"><span class="show-for-sr">Previous Slide</span>&#9664;&#xFE0E;</button>';
  $output .= '<button class="orbit-next"><span class="show-for-sr">Next Slide</span>&#9654;&#xFE0E;</button>';
  $output .= '<ul class="orbit-container">';

  $orbit_bullets = '<nav class="orbit-bullets">';
  $slider_counter = 0;
  foreach($nodes as $node){
    $output .= '<li class="orbit-slide">';
    // add link to the image and the caption.

    // output the slide_image
    // TODO: how to add image style here
    $field_gwt_slide_image = field_get_items('node', $node, 'field_gwt_slide_image');
    $field_gwt_slide_image_output = field_view_value('node', $node, 'field_gwt_slide_image', $field_gwt_slide_image[0]);
    $field_gwt_slide_image_output['#image_style'] = 'gwt_slides_banner_normal';

    $render_gwt_slide = render($field_gwt_slide_image_output);

    $field_gwt_image_caption = field_get_items('node', $node, 'field_gwt_image_caption');
    $field_gwt_image_caption_output = field_view_value('node', $node, 'field_gwt_image_caption', $field_gwt_image_caption[0]);
    $gwt_image_caption_output = '';
    // only display if there is a caption available
    if($field_gwt_image_caption_output['#markup']){
      $render_gwt_image_caption = render($field_gwt_image_caption_output);

      drupal_set_message('<pre>'.print_r($field_gwt_image_caption_output, 1).'</pre>');
      $gwt_image_caption_output = '<figcaption class="orbit-caption">';
      $gwt_image_caption_output .= $render_gwt_image_caption;
      $gwt_image_caption_output .= '</figcaption>';
    }

    $field_gwt_slide_link = field_get_items('node', $node, 'field_gwt_image_link');
    $field_gwt_slide_link_output = field_view_value('node', $node, 'field_gwt_image_link', $field_gwt_slide_link[0]);
    $is_external = url_is_external($field_gwt_slide_link_output['#markup']);

    // check if theres a URL link
    if($field_gwt_slide_link_output['#access'] && $field_gwt_slide_link_output['#markup']){
      $render_gwt_slide = l($render_gwt_slide, $field_gwt_slide_link_output['#markup'], array(
        'html' => TRUE,
        'external' => $is_external,
        'attributes' => array(
          'title' => $render_gwt_image_caption,
          'target' => $is_external ? '_blank' : '',
        ),
      ));
      $gwt_image_caption_output = l($gwt_image_caption_output, $field_gwt_slide_link_output['#markup'], array(
        'html' => TRUE,
        'external' => $is_external,
        'attributes' => array(
          'title' => $render_gwt_image_caption,
          'target' => $is_external ? '_blank' : '',
        ),
      ));
    }
    $output .= $render_gwt_slide;
    $output .= $gwt_image_caption_output;

    // TODO: add a image_style for the image field, remove the label
    /*
    $image_field = field_view_field('node', $node, 'field_gwt_slide_image', array(
      'label' => 'hidden',
      'settings' => array(
        ),
      // TODO: connect the weight to the weight field of the node of gwt_slides
      'weight' => 0,
      ));
    return  render($image_field);
    */
    $output .= '</li>';
    $orbit_bullets .= '<button class="" data-slide="'.$slider_counter.'"></button>';
    $slider_counter++;
    //return $image_field;
  }

  $output .= '</ul>';
  $output .= $orbit_bullets;
  $output .= '</div>';
  return $output;
}

/**
 * implementation of hook_form_alter()
 */
function gwt_drupal_helper_form_alter(&$form, &$form_alter, $form_id){
  // add a form on the menu_edit_item
  // check first if the default values is main-menu:0

  // TODO: add a settings to check if the Mega menu is enabled
  if($form_id == 'menu_edit_item'){
    if(!isset($form['original_item']['#value']['depth'])){
      return false;
    }

    if(substr($form['parent']['#default_value'], 0, 9) == 'main-menu' &&
      $form['original_item']['#value']['depth'] == 1){
      // TODO: add a note that mega menu can only display up to level 2 only
      // drupal_set_message('<pre>'.print_r($form, 1).'</pre>');
      $mlid = $form['mlid']['#value'];
      
      // add checkbox for MEGA_MENU
      $gwt_mega_menu = array(
        '#type' => 'fieldset', 
        '#title' => t('GWT Mega Menu'),
        '#collapsible' => TRUE, 
        '#collapsed' => FALSE,
      );
      $gwt_mega_menu['gwt_mega_menu_check'] = array(
        '#type' => 'checkbox', 
        '#title' => t('Enable Mega Menu'),
        // TODO: add a note that sub items up to level 1 will be loaded as well
        '#description' => t('Check to enable the mega menu for the item. When enabled, the <strong>Display Body</strong> will be loaded as the content of the Mega Menu.<br/>The Sub-items up to level 2 of the menu will be loaded as multi tab-iterface of it.'),
      );
      $gwt_mega_menu['gwt_mega_menu_display_body'] = array(
        '#type' => 'textfield', 
        '#title' => t('Display Body'),
        '#description' => t('The display body the content of the mega menu.<br/><strong>Note: </strong> The body will not display if the content is <strong>&lt;front&gt;</strong>.'),
        '#disabled' => TRUE,
        '#default_value' => $form['link_path']['#default_value'],
      );

      if($form['link_path']['#default_value'] == '<front>'){
        $gwt_mega_menu['gwt_mega_menu_check']['#disabled'] = true;
      }
      $mega_menu = gwt_drupal_mega_menu_load($mlid);
      if($mega_menu){
        $gwt_mega_menu['gwt_mega_menu_check']['#default_value'] = true;
      }

      $form['gwt_mega_menu'] = $gwt_mega_menu;

      $form['#validate'][] = 'gwt_drupal_helper_menu_edit_item_validate';
      $form['#submit'][] = 'gwt_drupal_helper_menu_edit_item_submit';
    }
  }
}

function gwt_drupal_mega_menu_load($mlid = 0){
  if($mlid == 'new'){
    return false;
  }

  $result = db_select('gwt_drupal_mega_menu', 'm')
    ->fields('m')
    ->condition('mlid', $mlid, '=')
    ->execute()
    ->fetchAssoc()
    ;
  // $aids = array($aid);
  return $result;
  // return $result;
}

function gwt_drupal_mega_menu_load_all(){
  $mega_menu = db_select('gwt_drupal_mega_menu', 'm')
    ->fields('m')
    ->execute()
    ->fetchAll()
    ;

  $items = array();
  foreach($mega_menu as $x => $item){
    $items[$item->mlid] = $item;
  }

  // reallign the menu items with its parent
  $cleaned_item = array();
  foreach($items as $mlid => $item){
    if(!isset($cleaned_item[$mlid])){
      $cleaned_item[$mlid] = new stdClass();
    }
    $cleaned_item[$mlid]->mlid = $item->mlid;
    $cleaned_item[$mlid]->nid = $item->nid;
    $cleaned_item[$mlid]->pmlid = $item->pmlid;

    $menu_link = menu_link_load($mlid);
    if($menu_link['has_children']){
      // load all sub menu
      $sub_items = _menu_link_load_by_plid($mlid);
      foreach($sub_items as $sub_item){
        if($sub_item['external'] || $sub_item['hidden']){
          break;
        }
        $cleaned_item[$mlid]->children[$sub_item['mlid']] = new stdClass();
        $cleaned_item[$mlid]->children[$sub_item['mlid']]->mlid = $sub_item['mlid'];

        if(substr($sub_item['link_path'], 0, 5) == 'node/'){
          $nid = (int)substr($sub_item['link_path'], 5);
        }
        $cleaned_item[$mlid]->children[$sub_item['mlid']]->nid = $nid;
        $cleaned_item[$mlid]->children[$sub_item['mlid']]->pmlid = $mlid;
      }
    }
  }
  // $aids = array($aid);
  return $cleaned_item;
  // return $result;
}

/**
 * helper function
 * loads menu item by parentid
 */
function _menu_link_load_by_plid($plid) {
  if (is_numeric($plid)) {
    $query = db_select('menu_links', 'ml');
    $query->leftJoin('menu_router', 'm', 'm.path = ml.router_path');
    $query->fields('ml');
    // Weight should be taken from {menu_links}, not {menu_router}.
    $query->addField('ml', 'weight', 'link_weight');
    $query->fields('m');
    $query->condition('ml.plid', $plid);
    if ($items = $query->execute()->fetchAll(PDO::FETCH_ASSOC)) {
      foreach($items as $item){
        $item ['weight'] = $item ['link_weight'];
        _menu_link_translate($item);
      }
      return $items;
    }
  }
  return FALSE;
}

/**
 * function callback of gwt_drupal_helper_form_alter form validate
 */
function gwt_drupal_helper_menu_edit_item_validate($form, &$form_state){
  // if the menu is not main-menu:0 OR the link_path is <front> do not save to the database

  // return false;
  // drupal_set_message('<pre>'.print_r($form_state, 1).'</pre>');
  // form_set_error('gwt_mega_menu_display_body', t(''));

  $values = $form_state['values'];
}

/**
 * function callback of gwt_drupal_helper_form_alter form submit
 */
function gwt_drupal_helper_menu_edit_item_submit($form, &$form_state){
  $values = $form_state['values'];
  if($values['link_path'] == '<front>' || substr($values['parent'], 0, 9) != 'main-menu' || $values['depth'] > 2){
    return false;
  }

  // retrieve mlid
  $mlid = $values['mlid'];
  if(substr($values['link_path'], 0, 5) == 'node/'){
    $nid = (int)substr($values['link_path'], 5);
  }

  // TODO: validate if the node is external, hidden, disabled

  $mega_menu = gwt_drupal_mega_menu_load($mlid);
  // drupal_set_message('<pre>'.print_r($mega_menu, 1).'</pre>');

  // get the $nid from the menu
  // save the relation to the gwt_drupal_mega_menu
  $fields = array(
    'nid' => $nid,
    'pmlid' => $values['original_item']['plid'],
  );

  // TODO: after loading the menu item, load all the sub-items (up to level 2) as well.

  // if the menu is already loaded and unchecked, delete the row
  if($mega_menu && $values['gwt_mega_menu_check'] != 1){
    $success = db_delete('gwt_drupal_mega_menu')
      ->condition('mlid', $mlid)
      ->execute();

    if($success){
      drupal_set_message('Mega Menu have been removed.');
    }
    return true;
  }

  // todo: if the mega menu has sub items, automatically add them as children items
  if($mega_menu){
    $update = db_update('gwt_drupal_mega_menu')->fields($fields);
    $update->condition('mlid', $mlid, '=');

    $success = $update->execute();
    if($success){
      drupal_set_message('Mega Menu updated.');
    }
  }
  else{
    $fields['mlid'] = $mlid;
    $insert = db_insert('gwt_drupal_mega_menu')->fields($fields);

    $success = $insert->execute();
    if($success){
      drupal_set_message('Mega Menu saved.');
    }
  }
  return true;
}

/**
 * Get the children of a menu item in a given menu.
 *
 * @param string $title
 *   The title of the parent menu item.
 * @param string $menu
 *   The internal menu name.
 * 
 * @return array
 *   The children of the given parent. 
 */
function _gwt_drupal_helpdesk_submenu_tree_all_data($title, $menu = 'main-menu') {
  $tree = menu_tree_all_data($menu);
  foreach ($tree as $branch) {
    if ($branch['link']['title'] == $title) {
      return $branch['below'];
    }
  }
  return array();
}
